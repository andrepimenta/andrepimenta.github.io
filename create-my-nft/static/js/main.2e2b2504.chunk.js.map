{"version":3,"sources":["components/MediaPreview.tsx","components/MediaInput.tsx","components/EditNFT.tsx","components/ConfirmNFT.tsx","components/CustomModal.tsx","App.tsx","components/ConfirmNetwork.tsx","reportWebVitals.ts","index.tsx"],"names":["MediaPreview","file","small","type","startsWith","width","style","maxHeight","borderRadius","controls","preload","autoPlay","playsInline","src","preview","Image","MediaInput","media","setMedia","useDropzone","accept","maxFiles","multiple","onDrop","acceptedFiles","map","Object","assign","URL","createObjectURL","getRootProps","getInputProps","className","background","border","paddingTop","paddingBottom","flex","alignItems","justifyContent","color","Container","textAlign","EditNFT","nftInfo","setNftInfo","onNext","handleChange","e","name","value","index","undefined","attributes","attribute","trait_type","marginTop","Form","Group","widths","Input","fluid","label","placeholder","onChange","TextArea","description","Field","marginBottom","Popup","header","content","pinned","on","trigger","Icon","unstackable","paddingRight","cursor","onClick","Button","alert","ConfirmNFT","fontSize","Grid","columns","Row","Column","CustomModal","Status","Screen","title","buttons","open","setOpen","Modal","onClose","onOpen","Header","Content","image","Actions","infuraProjectId","Networks","chainId","chainName","nativeCurrency","symbol","decimals","rpcUrls","blockExplorerUrls","ConfirmNetwork","fee","useState","openModal","setOpenModal","newChainId","setNewChainId","getNetworkName","addNetwork","a","window","ethereum","request","method","params","getNetworkTicker","networks","pressed","chainIdItem","padding","push","renderNetworks","App","setFee","edit","screen","setScreen","setChainId","status","setStatus","provider","useRef","factory","getProvider","current","ethers","providers","Web3Provider","getFactory","ContractFactory","abi","bytecode","getSigner","calculateFee","useCallback","getDefaultProvider","getFeeData","gasPrice","testName","estimateGas","from","selectedAddress","data","getDeployTransaction","estimatedGas","gasPriceToUse","maxFeePerGas","transactionFee","mul","utils","formatUnits","BigNumber","Number","toFixed","requestChainId","chainIdToSet","chain","useEffect","deployNFT","uri","deploy","contract","WaitingTransactionSuccessful","deployTransaction","wait","contractHash","contractAddress","uploadDataToIpfs","formData","FormData","append","fetch","body","ipfsAddResponse","json","addResponse","Hash","ipfsPinResponse","confirmEdit","network","confirmNetwork","confirm","addNFTtoWallet","address","options","tokenId","confirmNFT","UploadingToIPFS","ipfsMediaHash","metadata","JSON","stringify","metadataResponse","WaitingTransactionApproval","AddingNFTWallet","Done","message","Error","location","reload","align","maxWidth","marginRight","loading","marginLeft","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e2b2504.chunk.js","sourcesContent":["import React from \"react\";\nimport { Image } from \"semantic-ui-react\";\n\nconst MediaPreview = ({\n  file,\n  small = false,\n}: {\n  file: any;\n  small: boolean;\n}) => {\n  return file.type.startsWith(\"video\") ? (\n    <video\n      width={\"100%\"}\n      style={{ maxHeight: small ? 150 : 300, borderRadius: 10 }}\n      controls\n      preload=\"metadata\"\n      autoPlay\n      webkit-playsinline\n      playsInline\n    >\n      <source src={file.preview} type={file.type} />\n      Your browser does not support the video tag.\n    </video>\n  ) : (\n    <Image\n      src={file.preview}\n      style={{ maxHeight: small ? 150 : 300, borderRadius: 10 }}\n    />\n  );\n};\n\nexport default MediaPreview;\n","import React from \"react\";\nimport MediaPreview from \"./MediaPreview\";\nimport { useDropzone } from \"react-dropzone\";\nimport { Container } from \"semantic-ui-react\";\n\nfunction MediaInput({ media, setMedia }: any) {\n  const { getRootProps, getInputProps } = useDropzone({\n    accept: \"image/*,video/*,camera\",\n    maxFiles: 1,\n    multiple: false,\n    onDrop: (acceptedFiles) => {\n      setMedia(\n        acceptedFiles.map((file: any) =>\n          Object.assign(file, {\n            preview: URL.createObjectURL(file),\n          })\n        )[0]\n      );\n    },\n  });\n\n  return (\n    <section className=\"container\">\n      {media ? (\n        <MediaPreview file={media} small={false} />\n      ) : (\n        <div\n          {...getRootProps({ className: \"dropzone\" })}\n          style={{\n            background: \"linear-gradient(180deg, #FFFFFF 0%, #EAF6FF 100%)\",\n            border: \"2px dashed #037DD6\",\n            borderRadius: 6,\n            paddingTop: 85,\n            paddingBottom: 85,\n            flex: 1,\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            color: \"#037DD6\",\n          }}\n        >\n          <input {...getInputProps()} />\n          <Container textAlign=\"center\">\n            Take a photo, video or select from your device's media.\n          </Container>\n        </div>\n      )}\n    </section>\n  );\n}\n\nexport default MediaInput;\n","import React from \"react\";\nimport { Button, Form, Icon, Popup } from \"semantic-ui-react\";\nimport { Attribute, NftInfo } from \"../App\";\nimport MediaInput from \"./MediaInput\";\n\ninterface Props {\n  nftInfo: NftInfo;\n  setNftInfo: any;\n  onNext: () => void;\n  media: any;\n  setMedia: any;\n}\n\nconst EditNFT = ({ nftInfo, setNftInfo, onNext, media, setMedia }: Props) => {\n  const handleChange = (\n    e: any,\n    { name, value }: { name: string; value: string } | any,\n    index: number | undefined = undefined\n  ) => {\n    if (index !== undefined) {\n      return setNftInfo((nftInfo: NftInfo) => {\n        const attributes = [...nftInfo.attributes];\n        const attribute = attributes[index] as Attribute;\n        if (name === \"trait_type\") attribute.trait_type = value;\n        if (name === \"value\") attribute.value = value;\n        return {\n          ...nftInfo,\n          attributes,\n        };\n      });\n    }\n\n    setNftInfo((nftInfo: NftInfo) => ({\n      ...nftInfo,\n      [name]: value,\n    }));\n  };\n\n  const addAttribute = () => {\n    setNftInfo((nftInfo: NftInfo) => ({\n      ...nftInfo,\n      attributes: [...nftInfo.attributes, { trait_type: \"\", value: \"\" }],\n    }));\n  };\n\n  const next = () => {\n    if(!nftInfo.name) return alert(\"Please insert the NFT name\")\n    if(!media) return alert(\"Please insert the NFT media\")\n    onNext()\n  }\n\n  return (\n    <>\n      <MediaInput media={media} setMedia={setMedia} />\n      <div style={{ textAlign: \"left\", marginTop: 20 }}>\n        <Form text-align=\"left\">\n          <Form.Group widths={\"equal\"}>\n            <Form.Input\n              fluid\n              label=\"Name *\"\n              placeholder=\"What should we call your NFT?\"\n              onChange={handleChange}\n              value={nftInfo.name}\n              name=\"name\"\n            />\n          </Form.Group>\n          <Form.Group widths={\"equal\"}>\n            <Form.TextArea\n              label=\"Description\"\n              placeholder=\"This is how your NFT will be described\"\n              onChange={handleChange}\n              value={nftInfo.description}\n              name=\"description\"\n            />\n          </Form.Group>\n          <Form.Field style={{ marginBottom: 0 }}>\n            <label>Attributes  <Popup header={\"NFT Attributes\"} content='Attributes help describe your NFT. They are public and will most often be shown along with your NFT.' pinned on={'click'} trigger={<Icon style={{color: 'gray'}} name=\"info circle\"/>} /></label>\n            \n          </Form.Field>\n          {nftInfo.attributes.map((attribute, index) => (\n            <Form.Group\n              unstackable\n              widths={2}\n              key={index}\n              style={{ marginBottom: 14 }}\n            >\n              <Form.Input\n                fluid\n                placeholder=\"Type\"\n                name=\"trait_type\"\n                value={attribute.trait_type}\n                onChange={(e: any, value: any) => handleChange(e, value, index)}\n              />\n              <Form.Input\n                fluid\n                placeholder=\"Value\"\n                name=\"value\"\n                value={attribute.value}\n                onChange={(e: any, value: any) => handleChange(e, value, index)}\n              />\n            </Form.Group>\n          ))}\n          <div\n            style={{\n              color: \"#037DD6\",\n              paddingTop: 5,\n              paddingBottom: 10,\n              paddingRight: 10,\n              cursor: \"pointer\",\n            }}\n            onClick={addAttribute}\n          >\n            + Add attribute\n          </div>\n          <Button\n            fluid\n            style={{\n              marginTop: 30,\n              background: \"#037DD6\",\n              borderRadius: 100,\n              color: \"white\",\n              paddingBottom: 18,\n              paddingTop: 18,\n            }}\n            onClick={next}\n          >\n            Continue\n          </Button>\n        </Form>\n      </div>\n    </>\n  );\n};\n\nexport default EditNFT;\n","import React from \"react\";\nimport { Button, Grid } from \"semantic-ui-react\";\nimport { NftInfo } from \"../App\";\nimport MediaPreview from \"./MediaPreview\";\n\ninterface Props {\n  nftInfo: NftInfo;\n  onNext: () => void;\n  media: any;\n}\n\nconst ConfirmNFT = ({ nftInfo, onNext, media }: Props) => {\n  return (\n    <div>\n      <div style={{ marginTop: 60 }} />\n      <MediaPreview file={media} small={false}></MediaPreview>\n      <div style={{ textAlign: \"left\" }}>\n        <div style={{ fontSize: 24, marginTop: 30 }}>{nftInfo.name}</div>\n        <div style={{ fontSize: 16, marginTop: 30 }}>\n          <b>Description</b>\n        </div>\n        <div style={{ fontSize: 14, marginTop: 6 }}>{nftInfo.description}</div>\n        <div style={{ fontSize: 16, marginTop: 30 }}>\n          <Grid columns={2}>\n            {nftInfo.attributes.map((attribute) => {\n              return (\n                <Grid.Row style={{ paddingTop: 10 }}>\n                  <Grid.Column>\n                    <b>{attribute.trait_type}</b>\n                  </Grid.Column>\n                  <Grid.Column style={{ textAlign: \"right\" }}>\n                    <span>{attribute.value}</span>\n                  </Grid.Column>\n                </Grid.Row>\n              );\n            })}\n          </Grid>\n        </div>\n      </div>\n      <Button\n        fluid\n        style={{\n          marginTop: 60,\n          background: \"#037DD6\",\n          borderRadius: 100,\n          color: \"white\",\n          paddingBottom: 18,\n          paddingTop: 18,\n        }}\n        onClick={onNext}\n      >\n        Confirm\n      </Button>\n    </div>\n  );\n};\n\nexport default ConfirmNFT;\n","import React, { ReactElement } from 'react'\nimport { Modal } from 'semantic-ui-react'\n\ninterface Props {\n  title: string;\n  content: ReactElement;\n  buttons: ReactElement\n  open: boolean\n  setOpen: (open: boolean) => void;\n}\n\n\nfunction CustomModal({title, content, buttons, open, setOpen} : Props) {\n  return (\n    <Modal\n      onClose={() => setOpen(false)}\n      onOpen={() => setOpen(true)}\n      open={open}\n    >\n      <Modal.Header>{title}</Modal.Header>\n      <Modal.Content image>\n        {content}\n      </Modal.Content>\n      <Modal.Actions>\n        {buttons}\n      </Modal.Actions>\n    </Modal>\n  )\n}\n\nexport default CustomModal","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport \"./App.css\";\nimport { ethers } from \"ethers\";\n\nimport abi from \"./Contract/ABI/MetaMaskCreateMyNFT.json\";\nimport bytecode from \"./Contract/Bytecode/MetaMaskCreateMyNFT.json\";\nimport { Button, Container } from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport EditNFT from \"./components/EditNFT\";\nimport ConfirmNFT from \"./components/ConfirmNFT\";\nimport ConfirmNetwork from \"./components/ConfirmNetwork\";\n//import { createRaribleSdk } from \"@rarible/protocol-ethereum-sdk\";\n//import { EthersWeb3ProviderEthereum } from \"@rarible/ethers-ethereum\";\nimport CustomModal from \"./components/CustomModal\";\nimport { Icon } from \"semantic-ui-react\";\nimport MediaPreview from \"./components/MediaPreview\";\n\ndeclare global {\n  interface Window {\n    ethereum: any;\n  }\n}\n\nexport interface Attribute {\n  trait_type: string;\n  value: string;\n}\n\nexport interface NftInfo {\n  name: string;\n  description: string;\n  attributes: Attribute[];\n}\n\nenum Status {\n  UploadingToIPFS = 0,\n  WaitingTransactionApproval = 1,\n  WaitingTransactionSuccessful = 2,\n  AddingNFTWallet = 3,\n  Done = 4,\n}\n\nenum Screen {\n  edit = \"EDIT\",\n  network = \"NETWORK\",\n  confirm = \"CONFIRM\",\n}\n\nfunction App() {\n  const [nftInfo, setNftInfo] = useState<NftInfo>({\n    name: \"\",\n    description: \"\",\n    attributes: [{ trait_type: \"\", value: \"\" }],\n  });\n\n  const [fee, setFee] = useState<string>(\"loading\");\n\n  const [media, setMedia] = useState<any>();\n\n  const [screen, setScreen] = useState<Screen>(Screen.edit);\n\n  const [chainId, setChainId] = useState<string>();\n\n  const [status, setStatus] = useState<Number>();\n  const [openModal, setOpenModal] = useState(false);\n\n  const provider = useRef<ethers.providers.Web3Provider>();\n  const factory = useRef<ethers.ContractFactory>();\n\n  const getProvider = () => {\n    // Etherjs with MetaMask provider\n    provider.current = new ethers.providers.Web3Provider(window.ethereum);\n    return provider.current;\n  };\n\n  const getFactory = () => {\n    if (!provider?.current) return alert(\"No smart-contract present\");\n    if (factory.current) return factory.current;\n\n    // The factory we use for deploying contracts\n    factory.current = new ethers.ContractFactory(\n      abi,\n      bytecode,\n      provider.current.getSigner()\n    );\n  };\n\n  const calculateFee = useCallback(async () => {\n    const provider = getProvider();\n    const factory = getFactory();\n\n    if (!provider || !factory) return alert(\"No provider present\");\n\n    await window.ethereum.request({ method: \"eth_requestAccounts\" });\n\n    const gasPrice = await ethers.getDefaultProvider().getFeeData();\n\n    const testName = \"QmR7AC2E62dhe4F7EqSwsfU6wgqXs7ZGZHyyvk5FEKGDt6\";\n    const testURI = \"ipfs://QmR7AC2E62dhe4F7EqSwsfU6wgqXs7ZGZHyyvk5FEKGDt6\";\n\n    const estimatedGas = await provider.estimateGas({\n      from: window.ethereum.selectedAddress,\n      data: factory.getDeployTransaction(testName, testName, testURI).data,\n    });\n\n    const gasPriceToUse = gasPrice.maxFeePerGas || gasPrice.gasPrice;\n\n    const transactionFee = gasPriceToUse?.mul(estimatedGas);\n\n    const fee = ethers.utils.formatUnits(\n      ethers.BigNumber.from(transactionFee),\n      \"ether\"\n    );\n\n    setFee(Number(fee).toFixed(2));\n  }, []);\n\n  const requestChainId = async () => {\n    const chainIdToSet = await window.ethereum.request({\n      method: \"eth_chainId\",\n    });\n    setChainId(chainIdToSet);\n    window.ethereum.on(\"chainChanged\", (chain: string) => {\n      setChainId(chain);\n    });\n  };\n\n  useEffect(() => {\n    if (!window.ethereum) return;\n\n    factory.current = undefined;\n    provider.current = undefined;\n\n    getProvider();\n    getFactory();\n    calculateFee();\n  }, [calculateFee]);\n\n  useEffect(() => {\n    if (!window.ethereum) return;\n    requestChainId();\n  }, []);\n\n  const deployNFT = async (uri: string) => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    // The factory we use for deploying contracts\n    const factory = new ethers.ContractFactory(\n      abi,\n      bytecode,\n      provider.getSigner()\n    );\n\n    const contract = await factory.deploy(nftInfo.name, nftInfo.name, uri);\n\n    setStatus(Status.WaitingTransactionSuccessful);\n\n    const contractHash = await contract.deployTransaction.wait();\n\n    return contractHash.contractAddress;\n  };\n\n  /* For future use with rarible\n  const deployRarible = async (url: string) => {\n    const prov = new EthersWeb3ProviderEthereum(provider);\n    const sdk = createRaribleSdk(prov, \"rinkeby\", {\n      fetchApi: fetch,\n    });\n\n    const mintFormInitial = {\n      id: \"0x6ede7f3c26975aad32a475e1021d8f6f39c89d82\", // default collection on \"rinkeby\" that supports lazy minting\n      type: \"ERC721\",\n      isLazy: true,\n      isLazySupported: true,\n      loading: false,\n    };\n\n    const nftCollection = await sdk.apis.nftCollection.getNftCollectionById({\n      collection: mintFormInitial.id,\n    });\n    const tx = await sdk.nft.mint({\n      uri: url,\n      royalties: [],\n      // @ts-expect-error\n      collection: nftCollection,\n    });\n\n    console.log(\"RARIBLE\", tx);\n    return tx;\n  };\n  */\n\n  const uploadDataToIpfs = async (data: any): Promise<Response> => {\n    const formData = new FormData();\n\n    formData.append(\"file\", data);\n\n    const ipfsAddResponse = await fetch(\n      \"https://ipfs.infura.io:5001/api/v0/add\",\n      {\n        method: \"POST\",\n        body: formData,\n      }\n    );\n\n    const addResponse = await ipfsAddResponse.json();\n\n    const ipfsPinResponse = await fetch(\n      `https://ipfs.infura.io:5001/api/v0/pin/add?arg=${addResponse.Hash}`,\n      {\n        method: \"POST\",\n      }\n    );\n\n    await ipfsPinResponse.json();\n\n    return addResponse.Hash;\n  };\n\n  const confirmEdit = async () => {\n    setScreen(Screen.network);\n  };\n\n  const confirmNetwork = () => {\n    setScreen(Screen.confirm);\n  };\n\n  const addNFTtoWallet = async (address: string) => {\n    await window.ethereum.request({\n      method: \"wallet_watchAsset\",\n      params: { type: \"ERC721\", options: { address, tokenId: \"1\" } },\n    });\n  };\n\n  const confirmNFT = async () => {\n    try {\n      setStatus(Status.UploadingToIPFS);\n      setOpenModal(true);\n      const ipfsMediaHash = await uploadDataToIpfs(media);\n      const metadata = JSON.stringify({\n        ...nftInfo,\n        image: `ipfs://${ipfsMediaHash}`,\n      });\n      const metadataResponse = await uploadDataToIpfs(metadata);\n\n      setStatus(Status.WaitingTransactionApproval);\n\n      const address = await deployNFT(`ipfs://${metadataResponse}`);\n      //await deployRarible(`ipfs://${metadataResponse}`);\n\n      setStatus(Status.AddingNFTWallet);\n      await addNFTtoWallet(address);\n\n      setStatus(Status.Done);\n    } catch (error) {\n      let message = \"Unknown Error\";\n      if (error instanceof Error) message = error.message;\n      alert(`Please try again. There was an error: ${message}`);\n      window.location.reload();\n    }\n  };\n\n  const renderScreen = () => {\n    if (Screen.edit === screen)\n      return (\n        <EditNFT\n          nftInfo={nftInfo}\n          setNftInfo={setNftInfo}\n          onNext={confirmEdit}\n          media={media}\n          setMedia={setMedia}\n        />\n      );\n    if (screen === Screen.network)\n      return (\n        <ConfirmNetwork\n          fee={fee}\n          media={media}\n          nftInfo={nftInfo}\n          chainId={chainId}\n          onNext={confirmNetwork}\n        />\n      );\n    if (screen === Screen.confirm)\n      return <ConfirmNFT media={media} nftInfo={nftInfo} onNext={confirmNFT} />;\n  };\n\n  const renderStatuses = () => {\n    if (status === undefined) return <></>;\n    return status === Status.Done ? (\n      <>\n        <MediaPreview file={media} small={false}></MediaPreview>\n        <div style={{ textAlign: \"center\" }}>\n          Nicely done! To see your NFT, go to your wallet and open the NFT tab.\n        </div>\n      </>\n    ) : (\n      <div style={{ fontSize: 16 }}>\n        <div style={{marginTop: 10, marginBottom: 10}}>\n          <b>\n            This may take a few minutes, so keep your app open until you're\n            redirected.\n          </b>\n        </div>\n        <div style={{ padding: 10, fontSize: 16 }}>\n          <span style={{ marginRight: 6 }}>\n            1 - Uploading NFT media to IPFS{\" \"}\n          </span>\n          {status === Status.UploadingToIPFS ? (\n            <Icon style={{ color: \"#037DD6\" }} loading name=\"spinner\" />\n          ) : status > Status.UploadingToIPFS ? (\n            <Icon style={{ color: \"green\" }} name=\"check\" />\n          ) : (\n            \"\"\n          )}\n        </div>\n        <div style={{ padding: 10, fontSize: 16 }}>\n          <span style={{ marginRight: 6 }}>2 - Approving transaction </span>\n          {status === Status.WaitingTransactionApproval ? (\n            <Icon style={{ color: \"#037DD6\" }} loading name=\"spinner\" />\n          ) : status > Status.WaitingTransactionApproval ? (\n            <Icon style={{ color: \"green\" }} name=\"check\" />\n          ) : (\n            \"\"\n          )}\n        </div>\n        <div style={{ padding: 10, fontSize: 16 }}>\n          <span>3 - Finalizing transaction </span>\n          {status === Status.WaitingTransactionSuccessful ? (\n            <Icon style={{ color: \"#037DD6\" }} loading name=\"spinner\" />\n          ) : status > Status.WaitingTransactionSuccessful ? (\n            <Icon style={{ color: \"green\" }} name=\"check\" />\n          ) : (\n            \"\"\n          )}\n        </div>\n        <div style={{ padding: 10, fontSize: 16 }}>\n          <span style={{ marginRight: 6 }}>4 - Adding NFT to wallet </span>\n          {status === Status.AddingNFTWallet ? (\n            <Icon style={{ color: \"#037DD6\" }} loading name=\"spinner\" />\n          ) : status > Status.AddingNFTWallet ? (\n            <Icon style={{ color: \"green\" }} name=\"check\" />\n          ) : (\n            \"\"\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <Container align=\"middle\">\n        <div style={{ maxWidth: 700, marginTop: 20 }}>{renderScreen()}</div>\n        <CustomModal\n          title={status === 4 ? \"Your NFT is ready!\" : \"Creating NFT...\"}\n          content={renderStatuses()}\n          buttons={\n            status === 4 ? (\n              <Button\n                fluid\n                style={{\n                  marginRight: \"auto\",\n                  marginLeft: \"auto\",\n                  width: 150,\n                  background: \"#037DD6\",\n                  borderRadius: 100,\n                  color: \"white\",\n                  paddingBottom: 18,\n                  paddingTop: 18,\n                }}\n                onClick={() => window.location.reload()}\n              >\n                Close\n              </Button>\n            ) : (\n              <></>\n            )\n          }\n          open={openModal}\n          setOpen={setOpenModal}\n        />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState } from \"react\";\nimport { Button, Grid } from \"semantic-ui-react\";\nimport { NftInfo } from \"../App\";\nimport CustomModal from \"./CustomModal\";\nimport MediaPreview from \"./MediaPreview\";\n\ninterface Props {\n  nftInfo: NftInfo;\n  onNext: () => void;\n  media: any;\n  fee: string;\n  chainId: string | undefined;\n}\n\nconst infuraProjectId = \"test\";\n\nconst Networks: { [index: string]: any } = {\n  \"0x1\": {\n    chainId: \"0x1\",\n    chainName: \"Ethereum Mainnet\",\n    nativeCurrency: { name: \"ETH\", symbol: \"ETH\", decimals: 18 },\n  },\n  \"0xa86a\": {\n    chainId: \"0xa86a\",\n    chainName: \"Avalanche Mainnet C-Chain\",\n    rpcUrls: [\"https://api.avax.network/ext/bc/C/rpc\"],\n    nativeCurrency: { name: \"AVAX\", symbol: \"AVAX\", decimals: 18 },\n    blockExplorerUrls: [\"https://snowtrace.io\"],\n  },\n  \"0xa4b1\": {\n    chainId: \"0xa4b1\",\n    chainName: \"Arbitrum One\",\n    rpcUrls: [`https://arbitrum-mainnet.infura.io/v3/${infuraProjectId}`],\n    nativeCurrency: { name: \"ETH\", symbol: \"ETH\", decimals: 18 },\n  },\n  \"0x38\": {\n    chainId: \"0x38\",\n    chainName: \"BNB Smart Chain\",\n    rpcUrls: [\"https://bsc-dataseed1.binance.org\"],\n    nativeCurrency: { name: \"BNB\", symbol: \"BNB\", decimals: 18 },\n    blockExplorerUrls: [\"https://bscscan.com\"],\n  },\n  \"0xfa\": {\n    chainId: \"0xfa\",\n    chainName: \"Fantom Opera\",\n    rpcUrls: [\"https://rpc.ftm.tools/\"],\n    nativeCurrency: { name: \"FTM\", symbol: \"FTM\", decimals: 18 },\n    blockExplorerUrls: [\"https://ftmscan.com\"],\n  },\n  \"0x63564c40\": {\n    chainId: \"0x63564c40\",\n    chainName: \"Harmony Mainnet Shard 0\",\n    rpcUrls: [\"https://api.harmony.one/\"],\n    nativeCurrency: { name: \"ONE\", symbol: \"ONE\", decimals: 18 },\n    blockExplorerUrls: [\"https://explorer.harmony.one\"],\n  },\n  \"0xa\": {\n    chainId: \"0xa\",\n    chainName: \"Optimism\",\n    rpcUrls: [`https://optimism-mainnet.infura.io/v3/${infuraProjectId}`],\n    nativeCurrency: { name: \"ETH\", symbol: \"ETH\", decimals: 18 },\n    blockExplorerUrls: [\"https://optimistic.etherscan.io\"],\n  },\n  \"0x89\": {\n    chainId: \"0x89\",\n    chainName: \"Polygon Mainnet\",\n    rpcUrls: [`https://polygon-mainnet.infura.io/v3/${infuraProjectId}`],\n    nativeCurrency: { name: \"MATIC\", symbol: \"MATIC\", decimals: 18 },\n    blockExplorerUrls: [\"https://polygonscan.com\"],\n  },\n  \"0x2a15c308d\": {\n    chainId: \"0x2a15c308d\",\n    chainName: \"Palm\",\n    rpcUrls: [`https://palm-mainnet.infura.io/v3/${infuraProjectId}`],\n    nativeCurrency: { name: \"PALM\", symbol: \"PALM\", decimals: 18 },\n    blockExplorerUrls: [\"https://explorer.palm.io\"],\n  },\n};\n\nconst ConfirmNetwork = ({ nftInfo, onNext, media, fee, chainId }: Props) => {\n  const [openModal, setOpenModal] = useState(false);\n  const [newChainId, setNewChainId] = useState<string>();\n\n  const getNetworkName = () => {\n    if (!chainId) return;\n    return Networks[chainId]?.chainName;\n  };\n\n  const getNetworkTicker = () => {\n    if (!chainId) return \"\";\n    return Networks[chainId]?.nativeCurrency?.symbol || \"ETH\";\n  };\n\n  const renderText = () => {\n    if (chainId === \"0x1\")\n      return `Ethereum Mainnet is the gold standard for NFTs but gas fees can be high. NFTs created on Ethereum Mainnet are available for use on NFT marketplaces like OpenSea.`;\n    if (chainId === \"0x89\")\n      return `NFTs created on Polygon are available for use on NFT marketplaces like OpenSea.`;\n    return (\n      <span style={{ color: \"#D73A49\" }}>\n        NFTs created on this network may not be available on NFT marketplaces\n        like OpenSea.{\" \"}\n      </span>\n    );\n  };\n\n  const renderNetworks = () => {\n    const networks = [];\n    const pressed = { border: \"1px #037DD6 solid\", borderRadius: \"14px\" };\n    for (const chainIdItem in Networks) {\n      let style = { padding: 10 };\n      const chainToCompare = newChainId ? newChainId : chainId;\n      if (chainToCompare === chainIdItem) {\n        style = { ...style, ...pressed };\n      }\n\n      networks.push(\n        <div\n          style={style}\n          onClick={() => setNewChainId(Networks[chainIdItem].chainId)}\n        >\n          {Networks[chainIdItem].chainName}\n        </div>\n      );\n    }\n    return networks;\n  };\n\n  const openNetworkModal = () => {\n    setNewChainId(undefined);\n    setOpenModal(true);\n  };\n\n  const addNetwork = async () => {\n    if (newChainId === chainId || !newChainId) return setOpenModal(false);\n    try {\n      await window.ethereum.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: newChainId }],\n      });\n    } catch (switchError: any) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      try {\n        await window.ethereum.request({\n          method: \"wallet_addEthereumChain\",\n          params: [Networks[newChainId]],\n        });\n      } catch (addError) {\n        alert(\"Error adding chain\")\n        setOpenModal(false);\n      }\n    }\n\n    setOpenModal(false);\n  };\n\n  return (\n    <>\n      <div style={{ marginTop: 60 }} />\n      <MediaPreview file={media} small></MediaPreview>\n      <div style={{ fontSize: 18, marginTop: 30 }}>\n        Create NFT {getNetworkName() && \" on \"}\n      </div>\n      <div style={{ fontSize: 24, marginTop: 4 }}>\n        <b>{getNetworkName()}</b>\n      </div>\n      <div\n        style={{ marginTop: 20 }}\n      >{`Estimated gas fee: < ${fee} ${getNetworkTicker()}`}</div>\n      <div>Gas is a network fee, not a MetaMask fee</div>\n      <div\n        style={{ color: \"#037DD6\", paddingTop: 20, paddingBottom: 20 }}\n        onClick={openNetworkModal}\n      >\n        Use a different network\n      </div>\n      <div>{renderText()}</div>\n      <Button\n        fluid\n        style={{\n          marginTop: 60,\n          background: \"#037DD6\",\n          borderRadius: 100,\n          color: \"white\",\n          paddingBottom: 18,\n          paddingTop: 18,\n        }}\n        onClick={onNext}\n      >\n        Continue {getNetworkName() && `on ${getNetworkName()}`}\n      </Button>\n      <CustomModal\n        title={\"Choose a network\"}\n        content={<div>{renderNetworks()}</div>}\n        buttons={\n          <Grid columns={2}>\n            <Grid.Column>\n              <Button\n                fluid\n                style={{\n                  width: 150,\n                  borderRadius: 100,\n                  paddingBottom: 18,\n                  paddingTop: 18,\n                }}\n                onClick={() => setOpenModal(false)}\n              >\n                Cancel\n              </Button>\n            </Grid.Column>\n            <Grid.Column>\n              <Button\n                fluid\n                style={{\n                  width: 150,\n                  background: \"#037DD6\",\n                  borderRadius: 100,\n                  color: \"white\",\n                  paddingBottom: 18,\n                  paddingTop: 18,\n                }}\n                onClick={addNetwork}\n              >\n                Continue\n              </Button>\n            </Grid.Column>\n          </Grid>\n        }\n        open={openModal}\n        setOpen={setOpenModal}\n      />\n    </>\n  );\n};\n\nexport default ConfirmNetwork;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}